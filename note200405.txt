查看分支：$ git branch

创建分支：$ git branch <name>

切换分支：$ git checkout <name>或者git switch <name>

创建+切换分支：$ git checkout -b <name>或者git switch -c <name>

合并某分支到当前分支：$ git merge <name>

删除分支：$ git branch -d <name>

$ git log --graph --pretty=oneline --abbrev-commit
    分支查看git 日志

合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

$ git merge --no-ff -m "merge with no-ff" dev
    --no-ff参数，表示禁用Fast forward，此语句用于在禁用快速定向时合并分支

$ git stash 
    把当前工作现场“储藏”起来，等以后恢复现场后继续工作

$ git stash list
    把储藏起来的工作列出来

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了

$ git cherry-pick <commit>
    把特定提交的修改“复制”到当前分支

$ git branch -D <name>
    丢弃一个没有被合并过的分支,强行删除。

$ git remote
    查看远程库信息 用git remote -v显示更详细的信息

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

$ git tag <name>
    为分支创建标签

命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；

命令git tag可以查看所有标签。

命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。